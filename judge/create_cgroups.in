#!/bin/sh
# This script will create cgroups for DOMjudge to use in /sys/fs/cgroup/
# They need to be re-created after system boot; you may want to
# add this script to an init script.

# Change the following to the user you start the judgedaemon as.
# (hence: not the 'domjudge-run' user!)

JUDGEHOSTUSER=@DOMJUDGE_USER@
CGROUPBASE=@judgehost_cgroupdir@
CGROUP_VERSION=$(stat -fc %T /sys/fs/cgroup/)

print_cgroup_instruction () {
    echo ""
    echo "To fix this, please make the following changes:
    1. In /etc/default/grub, add 'cgroup_enable=memory swapaccount=1' to GRUB_CMDLINE_LINUX_DEFAULT.
       On modern distros (e.g. Debian bullseye and Ubuntu Jammy Jellyfish) which have cgroup v2 enabled by default,
       you need to add 'systemd.unified_cgroup_hierarchy=0' as well.
    2. Run update-grub
    3. Reboot" >&2
    exit 1
}

translate_cgroup_dir () {
    local TRANSLATED_PATH="$CGROUPBASE/$1/domjudge"
    if [ "$CGROUP_VERSION" -eq 2 ]; then
        TRANSLATED_PATH="$CGROUPBASE/domjudge/$1"
    fi
    echo "$TRANSLATED_PATH"
    return 0
}

error_memory_controller_missing () {
    echo "Error: cgroup support missing memory features in running kernel. Unable to continue."
    print_cgroup_instruction
}

if [ "$CGROUP_VERSION" = "tmpfs" ]; then
    CGROUP_VERSION=1
elif [ "$CGROUP_VERSION" = "cgroup2fs" ]; then
    CGROUP_VERSION=2
else
    echo "cgroup version not properly detected. Please report this bug to development@domjudge.org."
    exit 1
fi

for i in cpuset memory; do
    if [ "$CGROUP_VERSION" -eq 1 ]; then
        mkdir -p $CGROUPBASE/$i
        if [ ! -d $CGROUPBASE/$i/ ]; then
            if ! mount -t cgroup -o$i $i $CGROUPBASE/$i/; then
                echo "Error: Can not mount $i cgroup. Probably cgroup support is missing from running kernel. Unable to continue."
                print_cgroup_instruction
            fi
        fi
        mkdir -p $(translate_cgroup_dir $i)
    elif [ "$CGROUP_VERSION" -eq 2 ]; then
        if ! grep $i $CGROUPBASE/cgroup.controllers; then
            echo "Error: Can not use $i cgroup. Probably cgroup support is missing from running kernel. Unable to continue."
            print_cgroup_instruction
        fi
        echo "+${i}" > $CGROUPBASE/cgroup.subtree_control
        mkdir -p $(translate_cgroup_dir "")
    fi
done

if [ "$CGROUP_VERSION" -eq 1 ]; then
    if [ ! -f $CGROUPBASE/memory/memory.limit_in_bytes ] || [ ! -f $CGROUPBASE/memory/memory.memsw.limit_in_bytes ]; then
        error_memory_controller_missing
    fi
elif [ "$CGROUP_VERSION" -eq 2 ]; then
    for f in memory.max memory.swap.max; do
        if [ ! -f $(translate_cgroup_dir "$f") ]; then
            error_memory_controller_missing
        fi
    done
fi

chown -R $JUDGEHOSTUSER $(translate_cgroup_dir "*")

if [ "$CGROUP_VERSION" -eq 1 ]; then
    cat $CGROUPBASE/cpuset/cpuset.cpus > $(translate_cgroup_dir "cpuset")/cpuset.cpus
    cat $CGROUPBASE/cpuset/cpuset.mems > $(translate_cgroup_dir "cpuset")/cpuset.mems
elif [ "$CGROUP_VERSION" -eq 2 ]; then
    # This has changed from containing all cpus to an empty value, see https://docs.kernel.org/admin-guide/cgroup-v2.html#cpuset-interface-files
fi
